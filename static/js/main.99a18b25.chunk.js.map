{"version":3,"sources":["components/NewForm.js","App.js","serviceWorker.js","index.js"],"names":["NewForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","provider","invalid","runAPI","bind","assertThisInitialized","_this2","thisNPI","NPI","test","myNPI","encodedURI","window","encodeURI","fetch","then","response","json","data","setState","console","log","OtherOrgName","catch","error","facName","OrgName","facOtherName","facNPI","facTaxonomy","TaxonomyCode1","react_default","a","createElement","onClick","Component","App","value","handleChange","handleSubmit","e","target","preventDefault","className","onSubmit","onChange","components_NewForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99a18b25.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NewForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            provider : null,\n            invalid : ''\n        }\n        this.runAPI = this.runAPI.bind(this)\n    }\n\n    runAPI(){\n        const thisNPI = this.props.NPI\n        const regex = /\\d{10,}[a-z]*/;\n        const valid = regex.test(thisNPI)\n            \n            if (valid){\n            const myNPI= this.props.NPI\n            const myToken = \"3932f3b0-cfab-11dc-95ff-0800200c9a663932f3b0-cfab-11dc-95ff-0800200c9a66\"\n    \n            var encodedURI= window.encodeURI('http://www.hipaaspace.com/api/npi/getcode?q='+ myNPI + '&token=' + myToken);\n    \n            fetch(encodedURI)\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({\n                        provider : data,\n                        loading: false\n                    })\n                    console.log(this.props.NPI)\n                    console.log('API is working')\n                    console.log(this.state.provider.NPI[0].OtherOrgName)\n    \n                })\n                .catch(error => console.log('parsing failed', error))\n    \n            }\n            else {\n                this.setState({loading :false, invalid : 'This is an invalid identifier'})\n                console.log('Invalid NPI')\n            }\n    }\n\n    \n    render() {\n        const facName = this.state.loading ? \"\" : (this.state.provider.NPI[0].OrgName)\n        const facOtherName = this.state.loading ? \"\" : (this.state.provider.NPI[0].OtherOrgName)\n        const facNPI = this.state.loading ? \"\" : (this.state.provider.NPI[0].NPI)\n        const facTaxonomy = this.state.loading ? \"\" : (this.state.provider.NPI[0].TaxonomyCode1)\n        const text= this.state.loading ? \"Loading...\" : (\"NPI: \" + facNPI \n        + \"- \" + facName)\n        \n        return (\n            <div>\n                <p>Look for NPI: {this.props.NPI}</p>\n                <button onClick={this.runAPI}>Search Facility</button>\n                <p>Results</p><br />\n                 {facName}<br />\n                 {facOtherName}<br />\n                 {facNPI}<br />\n                 {facTaxonomy}<br />\n                 \n            </div>\n        );\n    }\n}\n\nexport default NewForm;","import React, { Component } from 'react';\nimport NewForm from './components/NewForm'\n//import Form from './components/Form'\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state ={\n      NPI: '',\n      value:'',\n\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n    handleChange(e){\n      this.setState({value: e.target.value, NPI: e.target.value})\n    }\n\n    handleSubmit(e) {\n      this.setState({NPI : this.state.value})\n      e.preventDefault()\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n            <form onSubmit={this.handleSubmit}>\n              <input value={this.state.value} onChange={this.handleChange}/>\n            </form>\n            \n            <NewForm NPI={this.state.NPI}/>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n//<input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}